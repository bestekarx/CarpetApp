// Meta Prompt:

You are a professional software assistant. We are developing a mobile application using .NET MAUI and Syncfusion components.

Rules:
- All development must strictly follow the existing design patterns and page structures (List, Search, Filter, Detail Update).
- No new style files or different component libraries will be added.
- Use existing Syncfusion components where necessary (e.g., SfListView, SfDataGrid, SfTextBox).
- The source code must be written in **English**.
- Only add short, clear comments in critical or complex parts of the code. Avoid unnecessary documentation or explanations.
- Pages must be implemented in a simple, clean, and performant way following MVVM principles.
- If an existing page, component, service, or ViewModel needs to be modified, **you must ask before changing it**.
- No external NuGet packages or libraries will be added unless explicitly approved.
- Directly perform the requested operations without asking additional questions or adding extra analysis (only ask if an important conflict or violation occurs).
- Navigation between pages must use standard MAUI navigation techniques. 
- Responsive design should be respected for different screen sizes (phones, tablets).
- CRUD operations are limited to listing, searching, filtering, opening detail/edit pages, and saving updates via existing services.

Language Rules:
- All user interface text must be in Turkish
- All resource strings must be added to both AppStrings.resx and AppStrings.Designer.cs
- Resource string names should follow the pattern: [EntityName][Action/Property] (e.g., SmsConfigurationEkle, SmsConfigurationAdi)
- When adding new strings:
  1. Add to AppStrings.resx with Turkish translation
  2. Add corresponding property to AppStrings.Designer.cs
  3. Use the string in XAML with {x:Static resx:AppStrings.StringName}
- Keep Turkish translations clear and professional
- Maintain consistency in terminology across the application

Async/Await Best Practices Rules:
- ALWAYS await every Task - never discard tasks with underscore (_ = Task.Run(...)) as this prevents exception handling
- NEVER use .Wait() or .Result on tasks - these can cause deadlocks and thread pool starvation
- Use async Task instead of async void for exception safety (except for event handlers)
- Always provide and use CancellationToken parameters in async methods for proper cancellation support
- Use ConfigureAwait(false) for library code and service layers that don't interact with UI
- Keep default ConfigureAwait behavior only for UI component code that needs to update UI after awaiting
- For constructor scenarios requiring async operations, use factory method pattern or SafeFireAndForget
- Avoid using Task.Run for async I/O operations - use Task.Run only for CPU-bound work
- If absolutely must block synchronously (rare), use GetAwaiter().GetResult() instead of .Wait()
- Use IAsyncEnumerable<T> and await foreach for streaming scenarios where items should be processed as they arrive
- Always handle exceptions properly in async methods - don't let them be swallowed
- Keep async flow throughout the application - avoid mixing sync and async patterns
- Use proper exception handling with try-catch blocks in async methods
- Consider using AsyncAwaitBestPractices NuGet package for SafeFireAndForget when needed

The goal is efficient, professional, production-quality development.

--------------------------------------

// Cursor Rules:

// cursor: explain
// Provide a short, clear explanation in English only for complex or critical code blocks. Do not explain trivial code.

// cursor: optimize
// Optimize View, ViewModel, or Service code for better performance without changing existing architecture or standards.

// cursor: navigation
// Implement navigation between pages using standard MAUI Shell Navigation or NavigationPage. No custom routing unless necessary.

// cursor: binding
// Set up proper XAML to ViewModel data bindings. Ensure minimal and efficient bindings, respecting BindingMode defaults.

// cursor: command
// Create ICommand implementations for user actions. Reuse existing command patterns if available.

// cursor: service
// Connect ViewModels to existing Services for data operations (CRUD). Do not create new services unless specified.

// cursor: crud
// Build UI flows for listing, searching, filtering, editing, and updating records using existing components and services. Use Syncfusion components if necessary.

// cursor: validation
// Add simple and effective input validation directly inside ViewModels. Use DataAnnotations or basic property validation if needed.

// cursor: syncfusion
// Use appropriate Syncfusion controls for lists, forms, and interactions. Follow Syncfusion best practices from the official documentation. No new styling; follow project conventions.

// cursor: async
// Implement proper async/await patterns following best practices. Always await tasks, use ConfigureAwait appropriately, and handle exceptions properly.

# .cursorrule
# Bu dosya, Cursor AI ile proje geliştirme sürecinde kullanılacak kuralları ve yönergeleri içerir.
# Gerektiğinde bu dosyayı güncelleyebilirsiniz.

[general]
# Türkçe iletişim tercih edilir.
language = tr

# Kodda açıklama ve dökümantasyon önemlidir.
documentation = true

# Kod değişikliklerinde açıklama eklenmeli.
commit_message_required = true

# Kodda gereksiz dosya ve bağımlılıklardan kaçınılmalı.
clean_code = true

# AI önerileri manuel olarak gözden geçirilmeli.
ai_review = true

# Async/Await kuralları
[async_await]
# Her Task'ı mutlaka await et - hiçbir zaman underscore ile discard etme (_ = Task.Run(...))
# .Wait() veya .Result kullanma - deadlock ve thread pool starvation'a neden olabilir
# async void yerine async Task kullan (event handler'lar hariç)
# CancellationToken parametrelerini her zaman sağla ve kullan
# UI ile etkileşim olmayan library ve service katmanlarında ConfigureAwait(false) kullan
# UI component'lerinde sadece UI güncellemesi gereken yerlerde default ConfigureAwait davranışını koru
# Constructor'da async operasyon gerekiyorsa factory method pattern veya SafeFireAndForget kullan
# Async I/O operasyonları için Task.Run kullanma - sadece CPU-bound işler için kullan
# Mutlaka senkron bloklama gerekiyorsa (nadir) .Wait() yerine GetAwaiter().GetResult() kullan
# Streaming senaryoları için IAsyncEnumerable<T> ve await foreach kullan
# Async method'larda exception handling'i düzgün yap - exception'ları yutma
# Async flow'u uygulama boyunca koru - sync ve async pattern'leri karıştırma
# Try-catch blokları ile proper exception handling yap
# Gerektiğinde SafeFireAndForget için AsyncAwaitBestPractices NuGet package'ını kullan

# CRUD sayfaları oluşturma kuralları
[crud_pages]
# 1. Model sınıfı oluşturulmalı (örn: SmsConfigurationModel.cs)
# 2. Servis sınıfı ve interface'i oluşturulmalı (örn: SmsConfigurationService.cs)
# 3. ViewModel sınıfları oluşturulmalı (örn: SmsConfigurationsViewModel.cs, SmsConfigurationDetailViewModel.cs)
# 4. XAML sayfaları oluşturulmalı (örn: SmsConfigurationsPage.xaml, SmsConfigurationDetailPage.xaml)
# 5. Code-behind dosyaları oluşturulmalı (örn: SmsConfigurationsPage.xaml.cs, SmsConfigurationDetailPage.xaml.cs)
# 6. Consts.cs'e route ve model sabitleri eklenmeli
# 7. AppStrings.cs'e string sabitleri eklenmeli
# 8. IBaseApiService.cs'e API uçları eklenmeli
# 9. Shell.xaml ve Shell.xaml.cs'e route'lar eklenmeli
# 10. MauiProgram.cs'e servis kaydı eklenmeli

# İsimlendirme kuralları
[naming]
# Model sınıfları: [EntityName]Model (örn: SmsConfigurationModel)
# Servis sınıfları: [EntityName]Service (örn: SmsConfigurationService)
# Servis interface'leri: I[EntityName]Service (örn: ISmsConfigurationService)
# ViewModel sınıfları: [EntityName]sViewModel, [EntityName]DetailViewModel (örn: SmsConfigurationsViewModel, SmsConfigurationDetailViewModel)
# XAML sayfaları: [EntityName]sPage, [EntityName]DetailPage (örn: SmsConfigurationsPage, SmsConfigurationDetailPage)
# Consts sabitleri: [EntityName]Model, [EntityName]sPage, [EntityName]Detail (örn: SmsConfigurationModel, SmsConfigurationsPage, SmsConfigurationDetail)
# AppStrings sabitleri: [EntityName]s, [EntityName]Ekle, [EntityName]Duzenle, [EntityName]Adi, [EntityName]Aciklama (örn: SmsConfigurations, SmsConfigurationEkle, SmsConfigurationDuzenle, SmsConfigurationAdi, SmsConfigurationAciklama)
# API uçları: Get[EntityName]List, Add[EntityName], Update[EntityName] (örn: GetSmsConfigurationList, AddSmsConfiguration, UpdateSmsConfiguration)

# Gerekirse ek kurallar buraya eklenebilir.

# Popup kuralları
[popup]
# Yeni bir popup oluşturulacağı zaman:
# 1. ProductFilterPage ve TaskEditPopup gibi BottomSheet tabanlı bir XAML ve code-behind dosyası oluştur.
# 2. Her popup için bağımsız bir ViewModel oluştur.
# 3. MauiProgram.cs ve AppShell.xaml.cs'ye view ve viewmodel referanslarını ekle.
# 4. Consts.cs'ye route sabiti ekle.
# 5. Açma/kapama işlemlerini ShowBottomSheetAsync ile yap.
# 6. Tüm popup UI metinleri AppStrings üzerinden Türkçe ve profesyonel olmalı.
# 7. Her popup reusable ve MVVM uyumlu olmalı.

# Popup açma ve veri alışverişi kuralı
[popup_opening]
# Yeni bir popup (BottomSheet) açarken:
# 1. new ile popup instance oluştur.
# 2. Gerekirse Init() fonksiyonu ile parametre aktar.
# 3. Veri dönüşü için event (ör. TaskSaved) kullan.
# 4. await popup.ShowAsync() ile aç.
# 5. Popup içinde veri dönerken event tetikle, kapatırken await DismissAsync() kullan.
# Kod örneği:
# var popup = new TaskEditPopup();
# popup.Init(param); // opsiyonel
# popup.TaskSaved += (s, data) => { ... };
# await popup.ShowAsync();
# // Popup içinde:
# TaskSaved?.Invoke(this, data);
# await DismissAsync();

# Fiş No kuralı
# 'Fiş No' (sipariş no veya fatura no olarak geçen) her zaman Received tablosundaki FicheNo alanına karşılık gelir. SMS, rapor ve ekranda bu şekilde eşleştirilmelidir.


# // Popup içinde:
# TaskSaved?.Invoke(this, data);
# await DismissAsync();

# Syncfusion Kuralı
# Syncfusion ile ilgili bir geliştirme, hata veya öneri olduğunda öncelikle 'CarpetApp/.cursor/rules/syncfusion-maui.pdf' dosyasındaki kuralları ve yönergeleri referans al. Yetersiz kalırsa internetten araştır.

